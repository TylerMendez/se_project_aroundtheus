!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=r,this._handleCardLike=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton&&this._likeButton.addEventListener("click",(()=>this._handleCardLike(this))),this._deleteButton&&this._deleteButton.addEventListener("click",(()=>this._handleCardDelete(this))),this._cardImageElement&&this._cardImageElement.addEventListener("click",(()=>this._handleImageClick({name:this._name,link:this._link})))}updateLikeState(e){this._isLiked=e,e?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}removeCard(){this._element&&(this._element.remove(),this._element=null)}generateCard(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImageElement=this._element.querySelector(".card__image"),this._element.querySelector(".card__title").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._isLiked&&this._likeButton.classList.add("card__like-button_active"),this._setEventListeners(),this._element}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._buttonElement&&(this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1))}_checkInputValidity(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.validity.valid?(e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)):(e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass))}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._buttonElement&&(this._toggleButtonState(),this._inputList.forEach((e=>{const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)})))}disableButton(){this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0}}class s{constructor(e,t){let{items:s,renderer:r}=e;if(this._items=s,this._renderer=r,this._container=document.querySelector(t),!this._container)throw new Error(`Container with selector ${t} not found`)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){if(this._popup=document.querySelector(e),!this._popup)throw new Error(`Popup with selector ${e} not found`);this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(e=>{(e.target===this._popup||e.target.classList.contains("modal__close-button"))&&this.close()}))}}class n extends r{constructor(e,t){if(super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector("form"),!this._form)throw new Error(`Form element not found in popup with selector ${e}`);this._inputList=Array.from(this._form.querySelectorAll("input")),this._submitButton=this._form.querySelector("button[type='submit']"),this._defaultButtonText=this._submitButton.textContent}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._defaultButtonText}close(){super.close(),this._form.reset()}}const i={inputSelector:".modal__input",submitButtonSelector:".modal__button-save",inactiveButtonClass:"modal__button-save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},o=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async getUserInfo(){try{const e=await fetch(`${this._baseUrl}/users/me`,{headers:this._headers});return this._checkResponse(e)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async getInitialCards(){try{const e=await fetch(`${this._baseUrl}/cards`,{headers:this._headers});return this._checkResponse(e)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async updateUserProfile(e){try{const t=await fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})});return this._checkResponse(t)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async updateAvatar(e){try{const t=await fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})});return this._checkResponse(t)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async addNewCard(e){try{const t=await fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})});return this._checkResponse(t)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async deleteCard(e){try{const t=await fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers});return this._checkResponse(t)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async likeCard(e){try{const t=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers});return this._checkResponse(t)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}async dislikeCard(e){try{const t=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers});return this._checkResponse(t)}catch(e){return Promise.reject(`Network error: ${e.message}`)}}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"84fdac63-ca2f-4986-bdd8-bb1fbbff275f","Content-Type":"application/json"}});let a;Promise.all([o.getUserInfo(),o.getInitialCards()]).then((e=>{let[t,r]=e;v.setUserInfo({name:t.name,job:t.about,avatar:t.avatar}),a=new s({items:r,renderer:e=>{const t=I(e);a.addItem(t)}},".cards__list"),a.renderItems()})).catch((e=>{console.error("Error loading initial data from server:",e)}));const l=document.querySelector("#profile-edit-form"),c=document.querySelector("#add-new-place-form"),d=document.querySelector("#avatar-form"),h=document.querySelector("#profile-edit-button"),u=document.querySelector(".profile__add-button"),_=document.querySelector("#avatar-edit-button"),m=document.querySelector("#profile-title-input"),p=document.querySelector("#profile-description-input"),f="#card-template",v=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;if(this._name=document.querySelector(t),this._job=document.querySelector(s),this._avatar=document.querySelector(r),!this._name||!this._job||!this._avatar)throw new Error("One or more selectors are invalid")}setUserInfo(e){let{name:t,job:s,avatar:r}=e;this._name.textContent=t,this._job.textContent=s,r&&(this._avatar.src=r)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"}),b=new n("#avatar-modal",(e=>{b.renderLoading(!0),o.updateAvatar({avatar:e.avatar}).then((e=>{v.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),b.close()})).catch((e=>console.error("Error updating avatar:",e))).finally((()=>{b.renderLoading(!1)}))}));b.setEventListeners();const E=new t(i,d);E.enableValidation(),_.addEventListener("click",(()=>{E.resetValidation(),b.open()}));const g=new class extends r{open(e,t){const s=this._popup.querySelector(".modal__image"),r=this._popup.querySelector(".modal__caption");if(!s||!r)throw new Error("Image or caption element not found in popup");s.src=t,s.alt=e,r.textContent=e,super.open()}}("#picture-modal");g.setEventListeners();const k=new n("#profile-edit-modal",(e=>{k.renderLoading(!0),o.updateUserProfile({name:e.title,about:e.description}).then((e=>{v.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),k.close()})).catch((e=>console.error("Error updating profile:",e))).finally((()=>{k.renderLoading(!1)}))}));k.setEventListeners();const y=new n("#profile-add-modal",(e=>{y.renderLoading(!0),o.addNewCard({name:e.title,link:e.url}).then((e=>{const t=I(e);a.addItem(t),y.close()})).catch((e=>console.error("Error adding new card:",e))).finally((()=>{y.renderLoading(!1)}))}));y.setEventListeners();const L=new class extends r{constructor(e){if(super(e),this._form=this._popup.querySelector("form"),!this._form)throw new Error(`Form element not found in popup with selector ${e}`)}setSubmitAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit&&this._handleSubmit()}))}close(){super.close(),this._form.reset()}}("#delete-card-modal");function S(e){L.setSubmitAction((()=>{o.deleteCard(e._id).then((()=>{e.removeCard(),L.close()})).catch((e=>console.error("Error deleting card:",e)))})),L.open()}function C(e){e._isLiked?o.dislikeCard(e._id).then((t=>{e.updateLikeState(!1)})).catch((e=>console.error("Error disliking card:",e))):o.likeCard(e._id).then((t=>{e.updateLikeState(!0)})).catch((e=>console.error("Error liking card:",e)))}function w(e){g.open(e.name,e.link)}function I(t){return new e(t,f,w,S,C).generateCard()}L.setEventListeners();const q=new t(i,l);q.enableValidation();const $=new t(i,c);$.enableValidation(),h.addEventListener("click",(()=>{const e=v.getUserInfo();m.value=e.name,p.value=e.job,q.resetValidation(),k.open()})),u.addEventListener("click",(()=>{$.resetValidation(),y.open()})),_.addEventListener("click",(()=>{E.resetValidation(),b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,